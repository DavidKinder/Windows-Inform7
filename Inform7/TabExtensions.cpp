// The extensions tab

#include "stdafx.h"
#include "TabExtensions.h"
#include "Inform.h"
#include "Panel.h"
#include "Messages.h"
#include "TextFormat.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif

IMPLEMENT_DYNAMIC(TabExtensions, TabBase)

BEGIN_MESSAGE_MAP(TabExtensions, TabBase)
  ON_WM_SIZE()
  ON_MESSAGE(WM_FINDREPLACECMD, OnFindReplaceCmd)
  ON_MESSAGE(WM_PUBLIBERROR, OnPubLibError)
  ON_MESSAGE(WM_USERNAVIGATE, OnUserNavigate)
END_MESSAGE_MAP()

const char* TabExtensions::m_files[TabExtensions::Number_ExtTabs] =
{
  "\\Extensions\\Reserved\\Documentation\\Extensions.html",
  PUBLIC_LIBRARY_URL "/index-windows.html"
};

TabExtensions::TabExtensions() : m_initialised(false), m_notify(NULL)
{
}

const char* TabExtensions::GetName(void)
{
  return "Extensions";
}

void TabExtensions::CreateTab(CWnd* parent)
{
  // Create the pane window
  Create(parent);

  // Create the tab control
  CRect zeroRect(0,0,0,0);
  m_tab.Create(NULL,NULL,WS_CHILD|WS_CLIPCHILDREN|WS_VISIBLE,zeroRect,this,0);
  m_tab.SendMessage(TCM_SETMINTABWIDTH,0,8);

  // Add tabs
  m_tab.InsertItem(ExtTab_Home,"?H");
  m_tab.InsertItem(ExtTab_Library,"Public Library");

  // Create the HTML control window
  if (!m_html.Create(NULL,NULL,WS_CHILD|WS_VISIBLE,CRect(0,0,0,0),this,1))
  {
    TRACE("Failed to create HTML control\n");
  }
  m_html.SetLinkConsumer(this);
  m_html.SetWindowText("Extensions page");
}

void TabExtensions::MoveTab(CRect& rect)
{
  MoveWindow(rect,TRUE);
}

void TabExtensions::MakeActive(TabState& state)
{
  if (!m_initialised)
  {
    // Show the extensions index page
    Show(GetUrlForTab(ExtTab_Home));
  }

  // Make the window visible
  ShowWindow(SW_SHOW);
  m_html.SetFocus();

  // Use and update the given tab state
  if (state.tab == Panel::Tab_Extensions)
    Show(state.url);
  GetTabState(state);
}

BOOL TabExtensions::OnCmdMsg(UINT nID, int nCode, void* pExtra, AFX_CMDHANDLERINFO* pHandlerInfo)
{
  if (m_html.OnCmdMsg(nID,nCode,pExtra,pHandlerInfo))
    return TRUE;
  return CWnd::OnCmdMsg(nID,nCode,pExtra,pHandlerInfo);
}

void TabExtensions::CompileProject(CompileStage stage, int code)
{
  switch (stage)
  {
  case RanInform7:
  case RanInstallExtension:
    if (code == 0)
    {
      if (GetActiveTab() == ExtTab_Home)
      {
        // For the home page, it may be that the extensions index was not available
        // but is generated by compilation, so check again what should be shown.
        Show(GetUrlForTab(ExtTab_Home));
      }
      else
      {
        // Reload the current page, in case it is generated by compilation
        m_html.Refresh();
      }
    }
    break;
  }
}

void TabExtensions::PrefsChanged(CRegKey& key)
{
  m_html.Refresh();
}

void TabExtensions::UpdateDPI(const std::map<CWnd*,double>& layout)
{
  TabBase::UpdateDPI(layout);
  Resize();
}

void TabExtensions::Show(const char* url)
{
  m_html.Navigate(url,true);
  m_initialised = true;
  UpdateActiveTab();
}

void TabExtensions::ShowHelp(void)
{
  Show(TextFormat::AnsiToUTF8(GetUrlForTab(ExtTab_Home)));
}

void TabExtensions::ShowLibrary(void)
{
  Show(TextFormat::AnsiToUTF8(GetUrlForTab(ExtTab_Library)));
}

void TabExtensions::DownloadedExt(int id)
{
  if (GetActiveTab() == ExtTab_Library)
  {
    CString code;
    code.Format("downloadSucceeded(%d);",id);
    m_html.RunJavaScript(code);
  }
}

void TabExtensions::SourceLink(const char* url)
{
  if (m_notify)
    m_notify->OnSourceLink(url,this,theApp.GetColour(InformApp::ColourHighlight));
}

void TabExtensions::LibraryLink(const char* url)
{
  GetParentFrame()->PostMessage(WM_EXTDOWNLOAD,(WPARAM)new CString(url));
}

void TabExtensions::SkeinLink(const char* url)
{
}

bool TabExtensions::DocLink(const char* url)
{
  if (m_notify)
    return m_notify->OnDocLink(url,this);
  return false;
}

void TabExtensions::LinkDone(void)
{
}

void TabExtensions::LinkError(const char* url)
{
  CString plUrl = GetUrlForTab(ExtTab_Library);
  if (strncmp(url,plUrl,plUrl.GetLength()) == 0)
    PostMessage(WM_PUBLIBERROR);
}

void TabExtensions::SetLinkNotify(LinkNotify* notify)
{
  m_notify = notify;
}

BOOL TabExtensions::OnNotify(WPARAM wParam, LPARAM lParam, LRESULT* pResult)
{
  // Pick up a tab change
  if (((LPNMHDR)lParam)->code == TCN_SELCHANGE)
  {
    ExtTabs tab = GetActiveTab();
    if (tab != No_ExtTab)
    {
      Show(GetUrlForTab(tab));

      TabState state;
      GetTabState(state);
      Panel::GetPanel(this)->AddToTabHistory(state);
    }
  }

  return TabBase::OnNotify(wParam, lParam, pResult);
}

void TabExtensions::OnSize(UINT nType, int cx, int cy)
{
  TabBase::OnSize(nType,cx,cy);
  Resize();
}

LRESULT TabExtensions::OnPubLibError(WPARAM, LPARAM)
{
  Show(TextFormat::AnsiToUTF8(theApp.GetAppDir()+"\\Documentation\\sections\\NoPublicLibrary.html"));
  return 0;
}

LRESULT TabExtensions::OnUserNavigate(WPARAM, LPARAM)
{
  if (IsWindowVisible())
  {
    UpdateActiveTab();

    TabState state;
    GetTabState(state);
    Panel::GetPanel(this)->AddToTabHistory(state);
  }
  return 0;
}

LRESULT TabExtensions::OnFindReplaceCmd(WPARAM wParam, LPARAM lParam)
{
  return m_html.OnFindReplaceCmd(wParam,lParam);
}

void TabExtensions::Resize(void)
{
  if (m_tab.GetSafeHwnd() != 0)
  {
    CRect client;
    GetClientRect(client);

    // Call the base class to resize and get parameters
    CSize fontSize;
    int heading;
    SizeTab(client,fontSize,heading);

    // Get the dimensions of the first and last tab buttons
    CRect firstTabItem = m_tab.GetItemRect(ExtTab_Home);
    CRect lastTabItem = m_tab.GetItemRect(ExtTab_Library);
    int w = lastTabItem.right - firstTabItem.left;

    // Resize the tab control
    CRect tabSize;
    tabSize.right = client.Width();
    tabSize.left = tabSize.right-w;
    if (tabSize.left < 0)
      tabSize.left = 0;
    tabSize.top = 0;
    tabSize.bottom = heading;
    m_tab.MoveWindow(tabSize,TRUE);

    client.top = heading;
    m_html.MoveWindow(client,TRUE);
  }
}

TabExtensions::ExtTabs TabExtensions::GetActiveTab(void)
{
  return (ExtTabs)m_tab.GetCurSel();
}

void TabExtensions::UpdateActiveTab(void)
{
  CString url = m_html.GetURL();
  int idx = No_ExtTab;
  for (int i = 0; i < sizeof m_files / sizeof m_files[0]; i++)
  {
    CString check(m_files[i]);
    if (url.Find(check) >= 0)
      idx = i;
    check.Replace('\\','/');
    if (url.Find(check) >= 0)
      idx = i;
  }
  if (idx == No_ExtTab)
  {
    if (url.CompareNoCase("inform://Extensions/Extensions.html") == 0)
      idx = ExtTab_Home;
    else if (TextFormat::EndsWith(url,"NoExtensions.html"))
      idx = ExtTab_Home;
    else if (TextFormat::EndsWith(url,"NoPublicLibrary.html"))
      idx = ExtTab_Library;
  }
  if (idx != GetActiveTab())
    m_tab.SetCurSel(idx);
}

void TabExtensions::GetTabState(TabState& state)
{
  state.tab = Panel::Tab_Extensions;
  state.url = m_html.GetURL();
}

CString TabExtensions::GetUrlForTab(ExtTabs tab)
{
  switch (tab)
  {
  case ExtTab_Home:
    {
      CString materials = theApp.GetMaterialsFolder((UINT_PTR)GetParentFrame());
      if (!materials.IsEmpty())
      {
        CString htmlFile = materials+m_files[tab];
        if (::GetFileAttributes(htmlFile) == INVALID_FILE_ATTRIBUTES)
          htmlFile = theApp.GetAppDir()+"\\Documentation\\sections\\NoExtensions.html";
        return TextFormat::AnsiToUTF8(htmlFile);
      }
    }
    break;
  case ExtTab_Library:
    return m_files[tab];
  }

  ASSERT(FALSE);
  return "";
}
