// The documentation tab

#include "stdafx.h"
#include "TabDoc.h"
#include "Inform.h"
#include "Panel.h"
#include "Messages.h"
#include "TextFormat.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif

IMPLEMENT_DYNAMIC(TabDoc, TabBase)

BEGIN_MESSAGE_MAP(TabDoc, TabBase)
  ON_WM_SIZE()
  ON_MESSAGE(WM_USERNAVIGATE, OnUserNavigate)
  ON_REGISTERED_MESSAGE(FINDMSG, OnFindReplaceCmd)
END_MESSAGE_MAP()

const char* TabDoc::m_files[TabDoc::Number_DocTabs] =
{
  "\\Documentation\\index.html",
  "\\Documentation\\examples_alphabetical.html",
  "\\Documentation\\general_index.html"
};

TabDoc::TabDoc() : m_tab(true), m_initialised(false)
{
}

const char* TabDoc::GetName(void)
{
  return "Documentation";
}

void TabDoc::CreateTab(CWnd* parent)
{
  // Create the pane window
  Create(parent);

  // Create the tab control
  CRect zeroRect(0,0,0,0);
  m_tab.Create(WS_CHILD|WS_CLIPCHILDREN|WS_VISIBLE,zeroRect,this,0);
  m_tab.SendMessage(TCM_SETMINTABWIDTH,0,8);

  // Add tabs
  m_tab.InsertItem(DocTab_Home,"?H");
  m_tab.InsertItem(DocTab_Examples,"Examples");
  m_tab.InsertItem(DocTab_Index,"General Index");

  // Create the HTML control window
  if (!m_html.Create(NULL,NULL,WS_CHILD|WS_VISIBLE,CRect(0,0,0,0),this,1))
  {
    TRACE("Failed to create HTML control\n");
  }
}

void TabDoc::MoveTab(CRect& rect)
{
  MoveWindow(rect,TRUE);
}

void TabDoc::MakeActive(TabState& state)
{
  if (!m_initialised)
  {
    // Show the index page
    ShowFile(DocTab_Home);
  }

  // Make the window visible
  ShowWindow(SW_SHOW);
  m_html.SetFocusOnContent();

  // Use and update the given tab state
  if (state.tab == Panel::Tab_Doc)
    Show(state.url);
  GetTabState(state);
}

BOOL TabDoc::OnCmdMsg(UINT nID, int nCode, void* pExtra, AFX_CMDHANDLERINFO* pHandlerInfo)
{
  if (m_html.OnCmdMsg(nID,nCode,pExtra,pHandlerInfo))
    return TRUE;
  return CWnd::OnCmdMsg(nID,nCode,pExtra,pHandlerInfo);
}

void TabDoc::CompileProject(CompileStage stage, int code)
{
  if (stage == RanNaturalInform)
  {
    if (code == 0)
    {
      // Reload the current page, in case it is generated by compilation
      m_html.Refresh();
    }
  }
}

void TabDoc::PrefsChanged(CRegKey& key)
{
  m_html.Refresh();
}

void TabDoc::Show(const char* url, LPCWSTR find)
{
  m_html.Navigate(url,true,find);
  m_initialised = true;
  UpdateActiveTab();
}

void TabDoc::SetFocusFlag(bool set)
{
  m_html.SetFocusFlag(set);
}

BOOL TabDoc::OnNotify(WPARAM wParam, LPARAM lParam, LRESULT* pResult)
{
  // Pick up a tab change
  if (((LPNMHDR)lParam)->code == TCN_SELCHANGE)
  {
    DocTabs tab = GetActiveTab();
    if (tab != No_DocTab)
    {
      ShowFile(tab);

      TabState state;
      GetTabState(state);
      Panel::GetPanel(this)->AddToTabHistory(state);
    }
  }

  return TabBase::OnNotify(wParam, lParam, pResult);
}

void TabDoc::OnSize(UINT nType, int cx, int cy)
{
  TabBase::OnSize(nType,cx,cy);

  if (m_tab.GetSafeHwnd() == 0)
    return;

  CRect client;
  GetClientRect(client);

  // Call the base class to resize and get parameters
  CSize fontSize;
  int heading;
  SizeTab(client,fontSize,heading);

  // Get the dimensions of the first and last tab buttons
  CRect firstTabItem, lastTabItem;
  m_tab.GetItemRect(DocTab_Home,firstTabItem);
  m_tab.GetItemRect(DocTab_Index,lastTabItem);
  int w = lastTabItem.right - firstTabItem.left + 4;

  // Resize the tab control
  CRect tabSize;
  tabSize.right = client.Width();
  tabSize.left = tabSize.right-w;
  if (tabSize.left < 0)
    tabSize.left = 0;
  tabSize.top = 0;
  tabSize.bottom = client.Height()-tabSize.top;
  m_tab.MoveWindow(tabSize,TRUE);

  // Work out the display area of the tab control
  CRect tabArea = tabSize;
  m_tab.AdjustRect(FALSE,tabArea);
  client.top = tabArea.top;

  m_html.MoveWindow(client,TRUE);
}

LRESULT TabDoc::OnUserNavigate(WPARAM, LPARAM)
{
  if (IsWindowVisible())
  {
    UpdateActiveTab();

    TabState state;
    GetTabState(state);
    Panel::GetPanel(this)->AddToTabHistory(state);
  }
  return 0;
}

LRESULT TabDoc::OnFindReplaceCmd(WPARAM wParam, LPARAM lParam)
{
  return m_html.OnFindReplaceCmd(wParam,lParam);
}

TabDoc::DocTabs TabDoc::GetActiveTab(void)
{
  return (DocTabs)m_tab.GetCurSel();
}

void TabDoc::UpdateActiveTab(void)
{
  CString url = m_html.GetURL();
  int idx = No_DocTab;
  for (int i = 0; i < sizeof m_files / sizeof m_files[0]; i++)
  {
    CString check(m_files[i]);
    if (url.Find(check) > 0)
      idx = i;
    check.Replace('\\','/');
    if (url.Find(check) > 0)
      idx = i;
  }
  if (idx != GetActiveTab())
    m_tab.SetCurSel(idx);
}

void TabDoc::GetTabState(TabState& state)
{
  state.tab = Panel::Tab_Doc;
  state.url = m_html.GetURL();
}

void TabDoc::ShowFile(DocTabs tab)
{
  Show(TextFormat::AnsiToUTF8(theApp.GetAppDir() + m_files[tab]));
}
